# -*- coding: utf-8 -*-
"""Hass6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zer9W6IKRHaXBo3lcasszuCt-BOGoWd0
"""

from attendee import AttendeeDistribution
from haasevent import HaasEvent


class CalculateEmission:
  
  def set_nonstudent_distrib(self):
    train_percent_non_student = 0.02
    bike_percent_non_student = 0.3
    car_percent_non_student = 0.6
    flight_percent_non_student = 0.05
    bus_percent_non_student = 0.02 
    self.nonstudent_distribution = AttendeeDistribution(train_percent_non_student, bike_percent_non_student, car_percent_non_student, flight_percent_non_student, bus_percent_non_student )

  def set_student_distrib(self):
    train_percent_student = 0.04
    bike_percent_student = 0.5
    car_percent_student = 0.3
    flight_percent_student = 0.01
    bus_percent_student = 0.05
    self.student_distribution = AttendeeDistribution(train_percent_student,bike_percent_student, car_percent_student, flight_percent_student, bus_percent_student )

  def __init__(self):    
    self.set_student_distrib()
    self.set_nonstudent_distrib()
    
  def get_emission_range(self, distrib, event, distrib_percentage):
     min = distrib_percentage * event.ci_distribution[0]
     mean = distrib_percentage * event.mean_attendance
     max = distrib_percentage * event.ci_distribution[1]

     emissions_min = distrib.calculate_emissions(min)
     emissions_mean = distrib.calculate_emissions(mean)
     emissions_max = distrib.calculate_emissions(max)
     return (emissions_min, emissions_mean, emissions_max)
     
  def get_haas_event_tuples(self):
   emission_obj = {}
   for event in self.haas_events:
      student_emissions = self.student_distribution.get_emission_dict(event.mean_attendance, event.student_percentage)  
      nonstudent_emissions = self.nonstudent_distribution.get_emission_dict(event.mean_attendance, event.non_student_percentage)   
      emission_obj[event.name] = {
         "student": student_emissions,
         "nonstudent": nonstudent_emissions
         }
   return emission_obj
  
  def calculate_haas_events_emissions(self):
   emission_obj = {}
   for event in self.haas_events:
      emissions_student_obj = self.get_emission_range(self.student_distribution, event, event.student_percentage)
      emissions_nonstudent_obj = self.get_emission_range(self.nonstudent_distribution, event, event.non_student_percentage)

      event.save_emissions(emissions_student_obj, emissions_nonstudent_obj)
      student_intensity = emissions_student_obj[1] / event.student_attendance
      non_student_intensity = emissions_nonstudent_obj[1] / event.non_student_attendance

      emission_obj[event.name] = {
         "student": event.emissions_student_obj,
         "nonstudent": event.emissions_nonstudent_obj,
         "mean_attendance": event.mean_attendance,
         "mean_student_intensity": student_intensity,
         "non_student_intensity": non_student_intensity,
         }
   return emission_obj
  
  def set_haas_events(self, haas_events):
     self.haas_events = haas_events

def create_haas_events(num_attendees):
    haas_events = []
    range = 0
    if num_attendees < 75 and num_attendees > 25:
       range = 7
    elif num_attendees < 150:
       range = 15
    else:
       range = 25
    
    min = num_attendees - range
    max = num_attendees + range
    estimated_attendance = [min, max]
    
    # Event Type
    # Career Fair
    # Conference
    # Blockchain/Sustainability
    # Lunch
    # Cal: Kickoffs / Celebratory 

    # TODO expect to match the eventtype with the student/non-student distribution
    #if event_type == "lunch":
      #student = .85
      #non_student = .15
    #elif event_type == "conference":
      #student = .85
      #non_student = .15
    #elif event_type == "industry_specific":

    #elif event_type == "celebration":

    # Career Fair	80	5	15
    # Conference	60	20	20
    # Blockchain/Sustainability	50	20	30
    # Lunch	85	10	5
    # Cal: Kickoffs / Celebratory 	70	25	5
    
    student = .85
    non_student = .15

    event_name = "EWMBA lunch"
    event_location = "Haas courtyard"
    event_time = "8/12/2023 12:00pm"

    haas_event = HaasEvent(estimated_attendance, student, non_student, event_name, event_location, event_time)
    haas_events.append(haas_event)
    return haas_events

def write_new_excelsheet():
   pass
   
def main():    
    calculate_emissions = CalculateEmission()
    #TODO Kentaro read excel sheet populate per haas event.
    haas_events = create_haas_events()
    calculate_emissions.set_haas_events(haas_events)
    emissions = calculate_emissions.calculate_haas_events_emissions()
    tuples = calculate_emissions.get_haas_event_tuples()

    print ("emissions are")
    print(emissions)

    print ("tuples are")
    print(tuples)

    # TODO

    write_new_excelsheet()
    
if __name__ == '__main__':
    main()

#For Students
#Number people bike,train,plane ...
#Total emissions for each
# Total final emissions

#For Non-Students
#Number people bike,train,plane ...
#Total emissions for each
# Total final emissions