# -*- coding: utf-8 -*-
"""Hass6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zer9W6IKRHaXBo3lcasszuCt-BOGoWd0
"""

from attendee import AttendeeDistribution
from haasevent import HaasEvent
from food_waste_category import food_waste_category
from food_waste_disposal_probability import food_waste_disposal_probability
import pandas as pd
from openpyxl import Workbook

class CalculateEmission:
  
  def set_nonstudent_distrib(self):
    train_percent_non_student = 0.02
    bike_percent_non_student = 0.3
    car_percent_non_student = 0.61 # added 0.01 since total was 0.99
    flight_percent_non_student = 0.05
    bus_percent_non_student = 0.02 
    self.nonstudent_distribution = AttendeeDistribution(train_percent_non_student, bike_percent_non_student, car_percent_non_student, flight_percent_non_student, bus_percent_non_student )

  def set_student_distrib(self):
    train_percent_student = 0.04
    bike_percent_student = 0.6 # added 0.1 since total was 0.9
    car_percent_student = 0.3
    flight_percent_student = 0.01
    bus_percent_student = 0.05
    self.student_distribution = AttendeeDistribution(train_percent_student,bike_percent_student, car_percent_student, flight_percent_student, bus_percent_student )

  def __init__(self):    
    self.set_student_distrib()
    self.set_nonstudent_distrib()
    
  def get_emission_range(self, distrib, event, distrib_percentage):
     min = distrib_percentage * event.ci_distribution[0]
     mean = distrib_percentage * event.mean_attendance
     max = distrib_percentage * event.ci_distribution[1]

     emissions_min = distrib.calculate_emissions(min)
     emissions_mean = distrib.calculate_emissions(mean)
     emissions_max = distrib.calculate_emissions(max)
     return (emissions_min, emissions_mean, emissions_max)
     
  def get_haas_event_tuples(self):
   emission_obj = []
   for event in self.haas_events:
      student_emissions = self.student_distribution.get_emission_dict(event.mean_attendance, event.student_percentage)  
      nonstudent_emissions = self.nonstudent_distribution.get_emission_dict(event.mean_attendance, event.non_student_percentage)   
      emission_obj.append({
         "event-attendance": event.mean_attendance,
         "event-time": event.time,
         "event-location": event.location,
         "event-catering": event.catering,
         "student": student_emissions,
         "nonstudent": nonstudent_emissions
         })
   return emission_obj
  
  def calculate_haas_events_emissions(self):
   emission_obj = []
   for event in self.haas_events:
      emissions_student_obj = self.get_emission_range(self.student_distribution, event, event.student_percentage)
      emissions_nonstudent_obj = self.get_emission_range(self.nonstudent_distribution, event, event.non_student_percentage)

      event.save_emissions(emissions_student_obj, emissions_nonstudent_obj)
      student_intensity = emissions_student_obj[1] / event.student_attendance
      non_student_intensity = emissions_nonstudent_obj[1] / event.non_student_attendance

      emission_obj.append( {
         "event-attendance": event.mean_attendance,
         "event-time": event.time,
         "event-location": event.location,
         "event-catering": event.catering,
         "student": event.emissions_student_obj,
         "nonstudent": event.emissions_nonstudent_obj,
         "mean_attendance": event.mean_attendance,
         "mean_student_intensity": student_intensity,
         "non_student_intensity": non_student_intensity,
         })
   return emission_obj
  
  def set_haas_events(self, haas_events):
     self.haas_events = haas_events

def create_haas_events(num_attendees, event_type, event_location, event_time, catering):
    haas_events = []
    range = 0
    if num_attendees < 75 and num_attendees > 25:
       range = 7
    elif num_attendees < 150:
       range = 15
    else:
       range = 25
    
    min = num_attendees - range
    max = num_attendees + range
    estimated_attendance = [min, max]

    # TODO expect to match the eventtype with the student/non-student distribution
    if event_type == "lunch":
        student = .85
        non_student = .15
    elif event_type == "conference":
        student = .85
        non_student = .15
    elif event_type == "industry_sector":
        student = .50
        non_student = .50
    elif event_type == "celebration":
        student = .70
        non_student = .30
    elif event_type == "career_fair":
        student = .80
        non_student = .20

    haas_event = HaasEvent(estimated_attendance, student, non_student, event_location, event_time, catering)
    haas_events.append(haas_event)
    return haas_events



def read_excel_sheet(sheet_name):
    df = pd.read_excel('input_csv/haas_report_1727043593.xlsx', sheet_name=sheet_name)
    return df

def process_event_data(row):
    print(row)
    return create_haas_events(row['attendees'], row['event_type'], row['location'], row['event_date'], row['catering_company'])


    

def write_new_excelsheet(transportation_tuples, waste_tuples):
    wb = Workbook()
    sheet_to_delete = wb['Sheet'] 
    wb.remove(sheet_to_delete) 
    ws_transportation = wb.create_sheet("transportation")
    
    write_transportation_tab(ws_transportation, transportation_tuples)

    ws_waste = wb.create_sheet("food_waste")
    write_waste_tab(ws_waste, waste_tuples)

    try:
        wb.save('output_csv/haas_emissions_report.xlsx')
        print("Excel file saved successfully.")
    except Exception as e:
        print(f"Error saving Excel file: {e}")
        print("Attempting to handle the error...")
        
        if isinstance(e, FileNotFoundError):
            print("The output directory doesn't exist. Please check the path.")
        elif isinstance(e, PermissionError):
            print("Permission denied. Please check file permissions.")
        else:
            print("Unexpected error occurred. Please check your data and try again.")
        
        # You might want to implement a fallback save method here
        # For example, saving to a different location or format

def write_waste_tab(worksheet, tuples):
    # Define headers
    # [Landfilled, Combusted, Composted, Anaerobically Digested (Dry Digestate with Curing),
#  Anaerobically Digested (Wet Digestate with Curing)]
#event_date	location	catering_company	attendees	food_item	total_footprint_foodprint	total_footprint_gpt	servings	food_quantity	food_price	footprint_per_kg	quantity	units	food_name	food_footprint	food_rating_quality			
    headers = [
        "event_date", "location", "catering_company", "attendees", "food_item", "total_footprint_foodprint", "total_footprint_gpt", "servings", "food_quantity", "food_price", "footprint_per_kg", "quantity", "units", "food_name", "food_footprint", "food_rating_quality",
        "food_waste_category", "food_waste_amount", "landfill_probability", "combusted_probability", "composted_probability", "anaerobically_digested_dry_probability", "anaerobically_digested_wet_probability"
    ]
    worksheet.append(headers)
    

def write_transportation_tab(worksheet, tuples):
    # Define headers
    headers = [
        "event-time", "event-location", "event-catering", "event-attendance",
        "student-train", "student-car", "student-plane", "student-bus", "student-bike", "student-total",
        "nonstudent-train", "nonstudent-car", "nonstudent-plane", "nonstudent-bus", "nonstudent-bike", "nonstudent-total", "total-emissions"
    ]
    worksheet.append(headers)

    # Write data
    for tup in tuples:
        row_data = [
            tup["event-time"], tup["event-location"], tup["event-catering"], tup["event-attendance"]
        ]
        total = 0
        for category in ['student', 'nonstudent']:
            sum = 0
            for transport in ['train', 'car', 'plane', 'bus', 'bike']:
                val = tup[category][transport]
                sum += val
                row_data.append(val)
            row_data.append(sum)
            total += sum
        row_data.append(total)
        worksheet.append(row_data)

def main():
    calculate_emissions = CalculateEmission()
    
    # Read the Excel sheet
    df = read_excel_sheet('event_totals')
    
    # Process each row and create HaasEvent objects
    all_haas_events = []
    for _, row in df.iterrows():
        haas_events = process_event_data(row)
        all_haas_events.extend(haas_events)
    
    # Set HaasEvents and calculate emissions
    calculate_emissions.set_haas_events(all_haas_events)
    emissions = calculate_emissions.calculate_haas_events_emissions()
    transportation_tuples = calculate_emissions.get_haas_event_tuples()

    print("Emissions are:")
    print(emissions)

    print("Tuples are:")
    print(transportation_tuples)

    # read food waste sheet
    df_food = read_excel_sheet('food')
    waste_tuples = []
    for _, row in df_food.iterrows():
        food_name = row['food_name']
        
        # Find the category for this food item
        food_category = None
        for category, items in food_waste_category.items():
            if food_name in items:
                food_category = category
                break
        
        if food_category is None:
            print(f"Warning: No category found for {food_name}")
            continue
        
        # Get the disposal probability for this category
        disposal_probability = food_waste_disposal_probability.get(food_name, [0, 0, 0, 0, 0])
        
        # Create a new tuple with the food information
        waste_tuple = {
            'food_name': food_name,
            'food_category': food_category,
            'landfill_prob': disposal_probability[0],
            'combustion_prob': disposal_probability[1],
            'compost_prob': disposal_probability[2],
            'anaerobic_dry_prob': disposal_probability[3],
            'anaerobic_wet_prob': disposal_probability[4]
        }
        waste_tuples.append(waste_tuple)
    
    # Write results to a new Excel sheet
    write_new_excelsheet(transportation_tuples, waste_tuples)

    print("Results have been written to 'haas/output_csv/haas_emissions_report.xlsx'")
    
    '''
    TODO food waste
    read every row of food sheet from haas/input_csv/haas_report_1727043593.xlsx
    then, for each row, use the function food_waste_calculator() to calculate the
    emissions abmount based on the food category it falls into from 
    haas/food_waste_category.py
    then, use the function food_waste_disposal_probability() to calculate the 
    probability of each food waste disposal method for each food category
    '''

def food_waste_calculator(food_category):
   #@pbryzk get the carbonssutain.io food waste calculation logic and put it here
   return
if __name__ == '__main__':
    main()

#For Students
#Number people bike,train,plane ...
#Total emissions for each
# Total final emissions

#For Non-Students
#Number people bike,train,plane ...
#Total emissions for each
# Total final emissions