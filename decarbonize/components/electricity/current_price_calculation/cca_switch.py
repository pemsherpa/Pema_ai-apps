# -*- coding: utf-8 -*-
"""CCA_switch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19DB5jKog0W4_DOnMsXgSIZ8SPfRxBRQb
"""

import pandas as pd

class electricity_cca:
    def __init__(self, file_path, user_zip_code):
        self.file_path = file_path
        self.df_pge_service = pd.read_excel(file_path, sheet_name='PG&E Service Area')
        self.cca_df = pd.read_excel(file_path, sheet_name='CCA')
        self.jrp_plans_df = pd.read_excel(file_path, sheet_name='Joint Rate Plan')

    def check_pge_cca_service_area(self, zip_code):
        result = self.df_pge_service[self.df_pge_service['PG&E Service area Zip Code'] == zip_code]
        if result.empty:
            return None

        cca_column = []
        for column in self.cca_df.columns:
            if zip_code in self.cca_df[column].values:
                cca_column.append(column)
        if not cca_column:
            return None
        return cca_column

    def get_plans(self, area, sector):
        possible_plans = []
        for cca_area in area:
            match = self.jrp_plans_df[self.jrp_plans_df['Location'] == cca_area][['Plan']]
            possible_plans.extend(match['Plan'].tolist())

        sector_plans = []
        for plan in self.jrp_plans_df.itertuples():
            if plan.Sector == sector:
                sector_plans.append(plan.Plan)

        return sector_plans

    def fetch_caa_plan_price(self, sector, fetched_plans, area):
        prices = []
        plans_list = fetched_plans.split(",")
        for plan in plans_list:
            for location in area:
                price_df = self.jrp_plans_df[
                    (self.jrp_plans_df['Plan'] == plan) &
                    (self.jrp_plans_df['Sector'] == sector) &
                    (self.jrp_plans_df['Location'] == location)
                ][['Plan', 'Total Cost', 'Renewable Energy Percentage', 'Electrical Company Name']]

                if not price_df.empty:
                    for _, row in price_df.iterrows():
                        prices.append({
                            "Plan": row["Plan"],
                            "Total Cost": row["Total Cost"],
                            "Renewable Energy percentage": row["Renewable Energy Percentage"],
                            "Electrical Company Name": row["Electrical Company Name"]
                        })

        return prices

    def optimize_plans(self, zip_code, price, sector, company, current_plan):
        # Normalize total cost and renewable energy percentage
        df = pd.DataFrame(price)
        df['Cost Score'] = 1 / df['Total Cost']
        df['Renewable Score'] = df['Renewable Energy percentage']
        df['Combined Score'] = 1 * df['Cost Score'] + 1 * df['Renewable Score']  # 1 used as a random weight

        best_plan = df.loc[df['Combined Score'].idxmax(), ['Plan', 'Total Cost', 'Renewable Energy percentage', 'Electrical Company Name']]

        new_plan_name = best_plan['Plan']
        new_cost = best_plan['Total Cost']

        money_saved = current_plan['Total Cost'] - new_cost
        cost_saved_percentage = (money_saved / current_plan['Total Cost']) * 100
        renewable_percentage_reduced = ((current_plan['Renewable Energy percentage'] - best_plan['Renewable Energy percentage']) / current_plan['Renewable Energy percentage']) * 100

        return {
            "New Plan Name": new_plan_name,
            "New Cost": new_cost,

            "New Percentage of Renewable Energy": best_plan['Renewable Energy percentage'],

        }

erp = Currentelectricity_cca(file_path, user_zip_code)
area = erp.check_pge_cca_service_area(user_zip_code)
plans = erp.get_plans(area, user_sector)
final_plans = list(set(plans))
fetched_plans = ",".join(final_plans)
price = erp.fetch_caa_plan_price(user_sector, fetched_plans, area)
current_plan = {
    "Plan": user_current_plan,
    "Total Cost": user_current_cost,
    "Renewable Energy percentage": user_current_renewable_energy,
    "Electrical Company Name": user_current_company
}
final_result = erp.optimize_plans(user_zip_code, price, user_sector, company, current_plan)
print("Optimization Result:", final_result)
