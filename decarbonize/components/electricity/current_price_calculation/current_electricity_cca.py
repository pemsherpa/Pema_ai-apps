# -*- coding: utf-8 -*-
"""Current_electricity_cca.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QIDsiKqErQ7q2Mr9xmNVC2R9lNGKYmIO
"""

import pandas as pd

class Currentelectricity_cca:
    def __init__(self, file_path,user_zip_code,kwh_used):
        self.file_path = file_path
        self.sheets = pd.read_excel(self.file_path, sheet_name=None)
        self.df_pge_service = pd.read_excel(file_path, sheet_name='PG&E Service Area')
        self.cca_df = pd.read_excel(file_path, sheet_name='CCA')
        self.jrp_plans_df = pd.read_excel(file_path, sheet_name='Joint Rate Plan')
        self.user_zip_code = user_zip_code
        self.kwh_used = kwh_used


    def check_pge_cca_service_area(self, user_zip_code):
        result = self.df_pge_service[self.df_pge_service['PG&E Service area Zip Code'] == user_zip_code]
        if result.empty:
            return None
        
        cca_column = []
        for column in self.cca_df.columns:
            if user_zip_code in self.cca_df[column].values:
                cca_column.append(column)
        if not cca_column:
            return None
        return cca_column

    def get_plans(self, area, sector): 
        possible_plans = []
        for cca_area in area:
            match = self.jrp_plans_df[self.jrp_plans_df['Location'] == cca_area][['Plan']]
            possible_plans.extend(match['Plan'].tolist())

        sector_plans = []
        for plan in self.jrp_plans_df.itertuples():
            if plan.Sector == sector:
                sector_plans.append(plan.Plan)

        return sector_plans

    def fetch_total_cost(self, zip_code, user_sector, company, plan):
      service_area = self.check_pge_cca_service_area(zip_code)
      if service_area is None:
        return 0

      possible_plans = self.get_plans(service_area, user_sector)
      if not possible_plans:
        return 0

      matched_rows = self.jrp_plans_df[
        (self.jrp_plans_df['Location'].isin(service_area)) &
        (self.jrp_plans_df['Sector'] == user_sector) &
        (self.jrp_plans_df['Electrical Company Name'] == company) &
        (self.jrp_plans_df['Plan'] == plan)
      ]
      
      if matched_rows.empty:
        return 0

      total_cost = matched_rows['Total Cost'].values[0] * self.kwh_used

      return float(total_cost)
