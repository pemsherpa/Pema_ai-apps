# -*- coding: utf-8 -*-
"""Electricity_yearly_plans.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c0ZObpOQt-BidEkqrn6KYs_xaYVk43th
"""

import pandas as pd

from steps.quarterly_step import QuaterStep

dataset_electric = pd.read_excel('Electricity Rate Plan.xlsx', sheet_name='Joint Rate Plan')

class Electric_Recommendations:
    def __init__(self, current_provider, optimized_plan, cur_year, cur_quarter):
        self.current_provider = current_provider
        self.optimized_plan = optimized_plan
        self.current_renew_percent = dataset_electric.loc[
            dataset_electric["Electrical Company Name"] == self.current_provider, "Renewable Percentages"].values[0]
        self.new_provider = dataset_electric.loc[dataset_electric["Plan"] == self.optimized_plan, "Electrical Company Name"].tolist()

        self.cur_year = cur_year
        self.cur_quarter = cur_quarter

        self.quarter_steps = [] 
        self.recommend_plan()

    def calculate_percentage_more_renewable(self, new_renewable):
        carbon_reduction = (new_renewable - self.current_renew_percent) / self.current_renew_percent
        return carbon_reduction

    def recommend_plan(self, year):
        if self.current_renew_percent == 100:
            step = QuaterStep(self.cur_year, self.cur_quarter)
            # TODO add the electric step and don't return just populate the quarter_steps list.
            step.add_step()

            self.quarter_steps.append() 

            return {
                "year": year,
                "recommended_plan": 100,
                "message": "Continue using 100% renewable energy.",
                "New Provider": self.new_provider,
                "carbon_emission_savings": 0
            }

        if year == 1:
            # TODO fix the optimized_plan
            return {
                "year": year,
                "recommended_plan": self.optimized_plan,
                "message": f"Switch to a {self.optimized_plan}% renewable energy source.",
                "New Provider":dataset_electric["Electrical Company Name"].tolist(),
                "carbon_emission_savings": self.calculate_percentage_more_renewable(self.optimized_plan)
            }
        if year == 2:
            if self.current_renew_percent <= 50:
              new_providers = self.new_provider.loc[self.new_provider["Renewable Percentages"] >= 50 or self.new_provider["Renewable Percentages"]>=self.current_renew_percent,"Electrical Company Name"].tolist()
              return {
                    "year": year,
                    "recommended_plan": 50,
                    "message": f"Switch to a {self.optimized_plan}% renewable energy source with 50% renewable energy savings.",
                    "New Provider":new_providers,
                    "carbon_emission_savings": self.calculate_percentage_more_renewable(50)
                }
            elif self.current_renew_percent >= 50 and self.current_renew_percent<100:
                new_providers = self.new_provider.loc[self.new_provider["Renewable Percentages"] >= 50].tolist()
                return {
                    "year": year,
                    "recommended_plan": 100,
                    "message": f"Switch to a {self.optimized_plan}% renewable energy source with 100% renewable energy savings.",
                    "New Provider": self.new_provider,
                    "carbon_emission_savings": self.calculate_percentage_more_renewable(100)
                }

        return {
            "year": year,
            "recommended_plan": self.current_renew_percent,
            "message": "Continue with the current plan.",
            "carbon_emission_savings": 0
        }