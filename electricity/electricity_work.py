# -*- coding: utf-8 -*-
"""Electricity Work

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ePwPoGLE4I2v2nhUDYOAZqynoNYGu0vv
"""

import pandas as pd

file_path = 'Electricity Rate Plan.xlsx'
sheets = pd.read_excel(file_path, sheet_name=None)

pge_service_df = sheets['PG&E Service Area']

def check_zip_code(zip_code):
    if zip_code in pge_service_df['PG&E Service area Zip Code'].values:
        return "In PG&E service"
    else:
        return "Not in PG&E service"

user_zip_code = 95347
result1 = check_zip_code(user_zip_code)

print(result1)

cca_df = sheets['CCA']

def match_cca_service(zip_code):
    for column in cca_df.columns:
        if user_zip_code in cca_df[column].values:
            return f"Matched in CCA: {column}"
    return "No CCA"

result2 = match_cca_service(result1)

print(result2)

joint_rate_plan_df = sheets['Joint Rate Plan']
bundled_peak_time_price_df = sheets['Bundled Peak Time Price']
unbundled_peak_time_price_df = sheets['Unbundled Peak Time Price']

def get_matched_rows(zip_code, user_sector, user_bundled):
    result1 = check_zip_code(zip_code)
    result2 = match_cca_service(zip_code)

    if "Matched in CCA" in result2:
        matched_column = result2.split(": ")[1]
        location_matched_rows = joint_rate_plan_df[joint_rate_plan_df['Location'] == matched_column]

        final_matched_rows = location_matched_rows[location_matched_rows['Sector'] == user_sector]

        return final_matched_rows
    elif "No CCA" in result2:
        if user_bundled == "Yes":
            sector_matched_rows = bundled_peak_time_price_df[bundled_peak_time_price_df['Sector'] == user_sector]
        else:
            sector_matched_rows = unbundled_peak_time_price_df[unbundled_peak_time_price_df['Sector'] == user_sector]

        return sector_matched_rows
    else:
        return "No matching rows in joint rate plan", "No matching rows in joint rate comparison"


user_sector = 'Large Commercial and Industrial'
user_bundled = 'Yes'

final_result = get_matched_rows(user_zip_code, user_sector, user_bundled)

print("Matched rows:")
print(final_result)

import subprocess

def check_condition_and_run(user_sector, user_bundled):

    condition1 = (user_sector == 'Large Commercial and Industrial' and user_bundled == 'Yes')
    condition2 = (user_sector == 'Large Commercial and Industrial' and user_bundled == 'No')
    condition3 = (user_sector == 'Small and Medium Business' and user_bundled == 'Yes')
    condition4 = (user_sector == 'Small and Medium Business' and user_bundled == 'No')

    if condition1:
        result1 = subprocess.run(['python', 'lcbelectricityrateplan.py'], capture_output=True, text=True)
        print("Output:", result1.stdout)
        print("Errors:", result1.stderr)
    elif condition2:
        result2 = subprocess.run(['python', 'lcuelectricityrateplan.py'], capture_output=True, text=True)
        print("Output:", result2.stdout)
        print("Errors:", result2.stderr)
    elif condition3:
        result3 = subprocess.run(['python', 'smbelectricityrateplan.py'], capture_output=True, text=True)
        print("Output:", result3.stdout)
        print("Errors:", result3.stderr)
    elif condition4:
        result4 = subprocess.run(['python', 'smuelectricityrateplan.py'], capture_output=True, text=True)
        print("Output:", result4.stdout)
        print("Errors:", result4.stderr)
    else:
        print("Condition not met, not running the script.")

check_condition_and_run(user_sector, user_bundled)