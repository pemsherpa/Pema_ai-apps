# -*- coding: utf-8 -*-
"""Electricity Work

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ePwPoGLE4I2v2nhUDYOAZqynoNYGu0vv
"""

import pandas as pd

from lcbelectricityrateplan import LCBElectricityRatePlan
from sectors.lcbsector import LCBSector
from sectors.smbsector import SMBSector
from smbelectricityrateplan import SMBElectricityRatePlan

file_path = 'Electricity Rate Plan.xlsx'
sheets = pd.read_excel(file_path, sheet_name=None)

pge_service_df = sheets['PG&E Service Area']

def check_zip_code(zip_code):
    if zip_code in pge_service_df['PG&E Service area Zip Code'].values:
        return "In PG&E service"
    else:
        return "Not in PG&E service"

user_zip_code = 95347
result1 = check_zip_code(user_zip_code)

print(result1)

cca_df = sheets['CCA']

def match_cca_service(zip_code):
    for column in cca_df.columns:
        if user_zip_code in cca_df[column].values:
            return f"Matched in CCA: {column}"
    return "No CCA"

result2 = match_cca_service(result1)

print(result2)

joint_rate_plan_df = sheets['Joint Rate Plan']
bundled_peak_time_price_df = sheets['Bundled Peak Time Price']
unbundled_peak_time_price_df = sheets['Unbundled Peak Time Price']

def get_matched_rows(zip_code, user_sector, user_bundled):
    result1 = check_zip_code(zip_code)
    result2 = match_cca_service(zip_code)

    if "Matched in CCA" in result2:
        matched_column = result2.split(": ")[1]
        location_matched_rows = joint_rate_plan_df[joint_rate_plan_df['Location'] == matched_column]

        final_matched_rows = location_matched_rows[location_matched_rows['Sector'] == user_sector]

        return final_matched_rows
    elif "No CCA" in result2:
        if user_bundled == "Yes":
            sector_matched_rows = bundled_peak_time_price_df[bundled_peak_time_price_df['Sector'] == user_sector]
        else:
            sector_matched_rows = unbundled_peak_time_price_df[unbundled_peak_time_price_df['Sector'] == user_sector]

        return sector_matched_rows
    else:
        return "No matching rows in joint rate plan", "No matching rows in joint rate comparison"


user_sector = 'Large Commercial and Industrial'
user_bundled = 'Yes'

final_result = get_matched_rows(user_zip_code, user_sector, user_bundled)

print("Matched rows:")
print(final_result)

import subprocess

def create_smb_sector(A1NTBStotal_usage, A1NTBWtotal_usage, A1BSpeak_usage):
    smb_sector = SMBSector(A1NTBStotal_usage, A1NTBWtotal_usage, A1BSpeak_usage)

    usage_data = {
        'A1NTBStotal_usage': ...,  # User provided
        'A1NTBWtotal_usage': ...,  # User provided
        'A1BSpeak_usage': ...,  # User provided
        'A1BSpartpeak_usage': ...,  # User provided
        'A1BSoffpeak_usage': ...,  # User provided
        'A1BWpartpeak_usage': ...,  # User provided
        'A1BWoffpeak_usage': ...,  # User provided
        'B1BSpeak_usage': ...,  # User provided
        'B1BSpartpeak_usage': ...,  # User provided
        'B1BSoffpeak_usage': ...,  # User provided
        'B1BWpeak_usage': ...,  # User provided
        'B1BWsuperoffpeak_usage': ...,  # User provided
        'B1BWoffpeak_usage': ...,  # User provided
        'B1STBSpeak_usage': ...,  # User provided
        'B1STBSpartpeak_usage': ...,  # User provided
        'B1STBSoffpeak_usage': ...,  # User provided
        'B1STBWpeak_usage': ...,  # User provided
        'B1STBWpartpeak_usage': ...,  # User provided
        'B1STBWsuperoffpeak_usage': ...,  # User provided
        'B1STBWoffpeak_usage': ...,  # User provided
        'B6BSpeak_usage': ...,  # User provided
        'B6BSoffpeak_usage': ...,  # User provided
        'B6BWpeak_usage': ...,  # User provided
        'B6BWsuperoffpeak_usage': ...,  # User provided
        'B6BWoffpeak_usage': ...,  # User provided
        'B10SVBSpeak_usage': ...,  # User provided
        'B10SVBSpartpeak_usage': ...,  # User provided
        'B10SVBSoffpeak_usage': ...,  # User provided
        'B10SVBWpeak_usage': ...,  # User provided
        'B10SVBWsuperoffpeak_usage': ...,  # User provided
        'B10SVBWoffpeak_usage': ...,  # User provided
        'B10PVBSpeak_usage': ...,  # User provided
        'B10PVBSpartpeak_usage': ...,  # User provided
        'B10PVBSoffpeak_usage': ...,  # User provided
        'B10PVBWpeak_usage': ...,  # User provided
        'B10PVBWsuperoffpeak_usage': ...,  # User provided
        'B10PVBWoffpeak_usage': ...,  # User provided
        'B10TVBSpeak_usage': ...,  # User provided
        'B10TVBSpartpeak_usage': ...,  # User provided
        'B10TVBSoffpeak_usage': ...,  # User provided
        'B10TVBWpeak_usage': ...,  # User provided
        'B10TVBWsuperoffpeak_usage': ...,  # User provided
        'B10TVBWoffpeak_usage': ...,  # User provided
        'meter_input': ...,  # User provided
        'time_in_use': ...,  # User provided
        'max_15min_usage': ...,  # User provided
        'B1STB_highest_demand_15mins': ...,  # User provided
    }
    return smb_sector

def create_lcb_sector(B19SVBSpeak_usage, B19SVBSpartpeak_usage, B19SVBSoffpeak_usage):
    lcb_sector = LCBSector(B19SVBSpeak_usage, B19SVBSpartpeak_usage, B19SVBSoffpeak_usage)

    usage_data = {
            'B19SVBSpeak_usage': 100,  # User provided
    'B19SVBSpartpeak_usage': 50,  # User provided
    'B19SVBSoffpeak_usage': 200,  # User provided
    'B19SVBWpeak_usage': 100,  # User provided
    'B19SVBWsuperoffpeak_usage': 50,  # User provided
    'B19SVBWoffpeak_usage': 200,  # User provided
    'B19PVBSpeak_usage': 100,  # User provided
    'B19PVBSpartpeak_usage': 50,  # User provided
    'B19PVBSoffpeak_usage': 200,  # User provided
    'B19PVBWpeak_usage': 100,  # User provided
    'B19PVBWsuperoffpeak_usage': 50,  # User provided
    'B19PVBWoffpeak_usage': 200,  # User provided
    'B19TVBSpeak_usage': 100,  # User provided
    'B19TVBSpartpeak_usage': 50,  # User provided
    'B19TVBSoffpeak_usage': 200,  # User provided
    'B19TVBWpeak_usage': 100,  # User provided
    'B19TVBWsuperoffpeak_usage': 50,  # User provided
    'B19TVBWoffpeak_usage': 200,  # User provided
    'B20SVBSpeak_usage': 100,  # User provided
    'B20SVBSpartpeak_usage': 50,  # User provided
    'B20SVBSoffpeak_usage': 200,  # User provided
    'B20SVBWpeak_usage': 100,  # User provided
    'B20SVBWsuperoffpeak_usage': 50,  # User provided
    'B20SVBWoffpeak_usage': 200,  # User provided
    'B20PVBSpeak_usage': 100,  # User provided
    'B20PVBSpartpeak_usage': 50,  # User provided
    'B20PVBSoffpeak_usage': 200,  # User provided
    'B20PVBWpeak_usage': 100,  # User provided
    'B20PVBWsuperoffpeak_usage': 50,  # User provided
    'B20PVBWoffpeak_usage': 200,  # User provided
    'B20TVBSpeak_usage': 100,  # User provided
    'B20TVBSpartpeak_usage': 50,  # User provided
    'B20TVBSoffpeak_usage': 200,  # User provided
    'B20TVBWpeak_usage': 100,  # User provided
    'B20TVBWsuperoffpeak_usage': 50,  # User provided
    'B20TVBWoffpeak_usage': 200,  # User provided
    'meter_input': 5,  # User provided
    'time_in_use': 10,  # User provided
    'max_15min_usage': 100,  # User provided
    }
    return lcb_sector

def check_condition_and_run(user_sector, user_bundled):

    condition1 = (user_sector == 'Large Commercial and Industrial' and user_bundled == 'Yes')
    condition2 = (user_sector == 'Large Commercial and Industrial' and user_bundled == 'No')
    condition3 = (user_sector == 'Small and Medium Business' and user_bundled == 'Yes')
    condition4 = (user_sector == 'Small and Medium Business' and user_bundled == 'No')

    if condition1:
        #result1 = subprocess.run(['python', 'lcbelectricityrateplan.py'], capture_output=True, text=True)
        lcb_sector = create_lcb_sector()
        rate_plan = LCBElectricityRatePlan('Electricity Rate Plan.xlsx', 'Bundled Peak Time Price', usage_data)
        result = rate_plan.optimize()
        print("Optimal solution:", result['x'])
        print("Optimal objective value:", result['objective'])

        print("Output:", result1.stdout)
        print("Errors:", result1.stderr)
    elif condition2:
        result2 = subprocess.run(['python', 'lcuelectricityrateplan.py'], capture_output=True, text=True)
        print("Output:", result2.stdout)
        print("Errors:", result2.stderr)
    elif condition3:
        # result3 = subprocess.run(['python', 'smbelectricityrateplan.py'], capture_output=True, text=True)
        smb_sector = create_smb_sector()
        rate_plan = SMBElectricityRatePlan('Electricity Rate Plan.xlsx', 'Bundled Peak Time Price', usage_data)
        result = rate_plan.optimize()

        print("Output:", result3.stdout)
        print("Errors:", result3.stderr)
    elif condition4:
        result4 = subprocess.run(['python', 'smuelectricityrateplan.py'], capture_output=True, text=True)
        print("Output:", result4.stdout)
        print("Errors:", result4.stderr)
    else:
        print("Condition not met, not running the script.")

check_condition_and_run(user_sector, user_bundled)