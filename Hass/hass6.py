# -*- coding: utf-8 -*-
"""Hass6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zer9W6IKRHaXBo3lcasszuCt-BOGoWd0
"""

from attendee import AttendeeDistribution
from haasevent import HaasEvent


class CalculateEmission:
  def __init__(self,student,non_student):    
    train_percent_student = 0.05
    bike_percent_student = 0.6
    car_percent_student = 0.4
    flight_percent_student = 0.01
    bus_percent_student = 0.04
    self.student_distribution = AttendeeDistribution(student, train_percent_student,bike_percent_student, car_percent_student, flight_percent_student, bus_percent_student )

    train_percent_non_student = 0.03
    bike_percent_non_student = 0.3
    car_percent_non_student = 0.6
    flight_percent_non_student = 0.05
    bus_percent_non_student = 0.02    
    self.nonstudent_distribution = AttendeeDistribution(non_student,train_percent_non_student, bike_percent_non_student, car_percent_non_student, flight_percent_non_student, bus_percent_non_student )

  def get_emission_range(self, distrib, event):
     emissions_min = distrib.calculate_emissions(event.ci_distribution[0])
     emissions_mean = distrib.calculate_emissions(event.mean_attance)
     emissions_max = distrib.calculate_emissions(event.ci_distribution[1])
     return (emissions_min, emissions_mean, emissions_max)
     
  def calculate_haas_events_emissions(self):
     for event in self.haas_events:
        emissions_student_obj = self.get_emission_range(self.student_distribution, event)
        emissions_nonstudent_obj = self.get_emission_range(self.nonstudent_distribution, event)

        event.save_emissions(emissions_student_obj, emissions_nonstudent_obj)

  def set_haas_events(self, haas_events):
     self.haas_events = haas_events

  def calculate_emission_element(self, boundary, distrib_obj):
     emission_element = self.train_distance*self.train_emission*boundary+self.car_distance*self.car_emission*boundary + self.bike_distance*self.bike_emission*boundary+self.plane_distance*self.plane_emission*boundary + self.bus_distance*self.bus_emission*boundary
     return emission_element
  
  def calculate_emission_group(self, min, max, distrib_obj):
     emission_group = [self.calculate_emission_element(min, distrib_obj),
                       self.calculate_emission_element(max, distrib_obj)]
     return emission_group

def create_haas_events():
    haas_events = []
    estimated_attance = [101, 125]
    haas_event = HaasEvent(estimated_attance, "EWMBA lunch", "Haas courtyard", "8/12/2023 12:00pm")
    haas_events.append(haas_event)
    return haas_events
    
def main():
   
    student = .85
    non_student = .15
    
    calculate_emissions = CalculateEmission(student, non_student)
    haas_events = create_haas_events()
    calculate_emissions.set_haas_events(haas_events)
    emissions = calculate_emissions.calculate_haas_events_emissions()
    print(emissions)
    
    
if __name__ == '__main__':
    main()

#For Students
#Number people bike,train,plane ...
#Total emissions for each
# Total final emissions

#For Non-Students
#Number people bike,train,plane ...
#Total emissions for each
# Total final emissions